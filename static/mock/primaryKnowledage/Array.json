{
  "ret": true,
  "articleList": [{
      "id": 1,
      "titleList": "js千分符",
      "questions": {
        "question": "给予一串数字，对数字进行千分符单位转换，如：123456789，转为123.456.789",
        "answer": [{
            "answer": "方法一：for循环实现",
            "explanation": "思路：将'点'插入到数字的倒数第三位前并每隔三位加一个'点'",
            "url": "./static/mock/primaryKnowledage/ArrayImg/ThousandSymbol1.jpg",
            "ImgExplanation": ""
          },
          {
            "answer": "方法二：正则表达式",
            "explanation": "思路：使用正则匹配对应位置，添加位置并替换为'点'",
            "url": "./static/mock/primaryKnowledage/ArrayImg/ThousandSymbol2.jpg",
            "ImgExplanation": ""
          }
        ]
      }
    },
    {
      "id": 2,
      "titleList": "数组去重",
      "questions": {
        "question": "请对arr=['a','a','c','d','e','f','c','a','e']进行去重",
        "answer": [{
          "answer": "第一种",
          "explanation": "新建一个数组，遍历传入数组值，值不在新数组中就push进该新数组中",
          "url": "./static/mock/primaryKnowledage/ArrayImg/arrRepeat1.jpg",
          "ImgExplanation": ""
        }, {
          "answer": "第二种",
          "explanation": "使用数组对象reduce()函数进行操作",
          "url": "./static/mock/primaryKnowledage/ArrayImg/arrRepeat2.jpg",
          "ImgExplanation": "缺点:如果对数组的reduce()api不熟悉可能会比较难理解"
        }, {
          "answer": "第三种",
          "explanation": "使用ES6中Set()去重",
          "url": "./static/mock/primaryKnowledage/ArrayImg/arrRepeat3.jpg",
          "ImgExplanation": "代码可简写：[...new Set(arr)]<br>缺点:es6方法，考虑兼容性问题，并且该方法无法去除\"{}\"空对象"
        }, {
          "answer": "第四种",
          "explanation": "使用数组filter()函数去重",
          "url": "./static/mock/primaryKnowledage/ArrayImg/arrRepeat4.jpg",
          "ImgExplanation": "注:filter() 方法创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素。"
        }]
      }
    },
    {
      "id": 3,
      "titleList": "数组平拍",
      "questions": {
        "question": "请实现一个方法，将嵌套的数组扁平化",
        "answer": [{
            "answer": "1.1递归思维-for-!isArray-recursion",
            "explanation": "思路：新建数组，遍历传入的数组值，判断是否为数组类型，是则push进新数组，否则执行递归方法，对递归后的数组进行concat合并操作",
            "url": "./static/mock/primaryKnowledage/ArrayImg/ArraySplitting1.jpg",
            "ImgExplanation": "该方法中，newArr变量一直存在，为防止污染需及时清空"
          },
          {
            "answer": "1.2递归思维-for-typeof-instanceof-recursion",
            "explanation": "思路：新建数组，遍历传入的数组值，判断是否为Number类型，是则push进新数组，否则执行是否为array类型，对递归后的数组进行concat合并操作",
            "url": "./static/mock/primaryKnowledage/ArrayImg/ArraySplitting3.jpg",
            "ImgExplanation": "该方法适用于数字平铺，如想将字符串平铺需进行改进"
          },
          {
            "answer": "1.3递归思维-while-prototype-some-concat-apply",
            "explanation": "思路：通过while循环中array.some方法判断数组中元素是否为数组，再对元素进行合并操作",
            "url": "./static/mock/primaryKnowledage/ArrayImg/ArraySplitting4.jpg",
            "ImgExplanation": "该方法的关键，1.使用Array.some方法作为循环条件，2.利用数组原型链进行合并操作，"
          },
          {
            "answer": "2.正则思想",
            "explanation": "思路：将数组转为字符串，利用正则表达式replace方法替换字符串内的中括号，在将字符串转为数组",
            "url": "./static/mock/primaryKnowledage/ArrayImg/ArraySplitting2.jpg",
            "ImgExplanation": "该方法虽然代码少，逻辑清晰，但原题对数组中类型如有严格要求，要及时转换。"
          }
        ]
      }
    },
    {
      "id": 5,
      "titleList": "深浅克隆",
      "questions": {
        "question": "请描述深浅克隆的区别：并试着实现简单的深拷贝",
        "answer": [{
            "answer": "在实际开发过程中，我们并不知道传过来的数据是否在其他地方还要使用，贸然改变数据的值可能会出现数据错误的问题",
            "explanation": "所以对传递过来的数据我们要保存后使用。这就涉及到浅拷贝与深拷贝的知识了",
            "url": "./static/mock/primaryKnowledage/ArrayImg/CopyNeedKnow.png",
            "ImgExplanation": ""
          },
          {
            "answer": "1. 浅拷贝 第一种情况，如果改变数据的值，所有指向这一地址的属性都会被改变",
            "explanation": "浅拷贝，顾名思义，拷贝程度较低，如图所示",
            "url": "./static/mock/primaryKnowledage/ArrayImg/shallowCopy-1.jpg",
            "ImgExplanation": "直接赋值形式的拷贝会使得数据改变时出现问题，这是第一种情况，那么造成这样情况的原因是什么呢？"
          },
          {
            "answer": "栈地址与堆地址",
            "explanation": "如图所示",
            "url": "./static/mock/primaryKnowledage/ArrayImg/shallowCopy-2.png",
            "ImgExplanation": "我们可以知道在直接将arr属性赋值给shallowCopy的时候，只是在堆内存中创建了一个变量，地址<span class='K_W'>指向了与arr相同的堆内存</span>中，所以当我们改变其中一个值的时候，另一个值也会被改变"
          },
          {
            "answer": "1.1 浅拷贝 第二种情况，改变值的连锁反应只使用基本类型的值",
            "explanation": "请看下图(先看红色区域，再看绿色区域)",
            "url": "./static/mock/primaryKnowledage/ArrayImg/shallowCopy-3.jpg",
            "ImgExplanation": "我们可以看到，第一层拷贝成功，但是下一层的引用类型并没有实现深入拷贝（下面会讲深拷贝）<br>诸如：<span class='K_W'>数组的slice()方法，concat()方法，直接使用扩展运算符赋值shallowCopy = [...arr], 或对象的复制方法：Object.assign()</span>这几种都会实现这样的浅拷贝"
          },
          {
            "answer": "2. 深拷贝",
            "explanation": "深拷贝不同浅拷贝，深拷贝相当于独立于被拷贝的数据，达到完全脱离原数据的堆地址",
            "url": "./static/mock/primaryKnowledage/ArrayImg/deepCopyKnow.png",
            "ImgExplanation": ""
          },
          {
            "answer": "2.1 深拷贝 遍历引用类型，利用递归，实现层层复制",
            "explanation": "如图所示",
            "url": "./static/mock/primaryKnowledage/ArrayImg/recursionDeepCpoy.jpg",
            "ImgExplanation": "深拷贝而来的数据类型为对象类型，值完全独立"
          },
          {
            "answer": "2.2 深拷贝 借用JSON.stringify()函数与JSON.parse()函数",
            "explanation": "我们通过将数组进行JSON的两次转换实现拷贝",
            "url": "./static/mock/primaryKnowledage/ArrayImg/jsonDeepCopy.jpg",
            "ImgExplanation": ""
          },
          {
            "answer": "不过JSON转换的函数存在几个缺点",
            "explanation": "如图所示",
            "url": "./static/mock/primaryKnowledage/ArrayImg/deepCopyJsonError.png",
            "ImgExplanation": "虽然存在这些缺点，不过并不影响使用，毕竟没有人会去拷贝undefined和null"
          },
          {
            "answer": "2.3 深拷贝 使用JQ的extend方法实现深拷贝",
            "explanation": "如果我们在项目中使用了第三方jq库，可以通过$.extend()方法实现深拷贝",
            "url": "./static/mock/primaryKnowledage/ArrayImg/extendDeepCopy.jpg",
            "ImgExplanation": ""
          },
          {
            "answer": "2.4 深拷贝 第三方库，lodash的_.cloneDeep()",
            "explanation": "目前没接触过，哈哈哈，有机会再写",
            "url": "",
            "ImgExplanation": "更新ing···"
          }
        ]
      }
    },
    {
      "id": 6,
      "titleList": "Set方法",
      "questions": {
        "question": "Set去重，以及set常见用法",
        "answer": [{
            "answer": "1.set用法",
            "explanation": "通过图片我们可以了解到，Set()方法会返回一个特殊的对象<br>该对象内的<span class='K_W'>值唯一</span>，可<span class='K_W'>添加</span>，可<span class='K_W'>删除</span>，可判断<span class='K_W'>是否存在某值</span>，可<span class='K_W'>获取长度</span>。",
            "url": "./static/mock/primaryKnowledage/ArrayImg/Set.jpg",
            "ImgExplanation": "可以利用Set方法的特性，对数组进行去重操作。"
          },
          {
            "answer": "2.set方法去重",
            "explanation": "去重方式如下：",
            "url": "./static/mock/primaryKnowledage/ArrayImg/Set-DuplicationCanBeRemoved.jpg",
            "ImgExplanation": "不过要注意一点，数组内的数据类型相同，才会选唯一值。"
          },
          {
            "answer": "",
            "explanation": "请看下面的例子",
            "url": "./static/mock/primaryKnowledage/ArrayImg/Set-DuplicationCanBeRemoved-Else.jpg",
            "ImgExplanation": "不同类型的变量会被添加到set中"
          }
        ]
      }
    }, {
      "id": 7,
      "titleList": "手写isArray",
      "questions": {
        "question": "手写isArray方法",
        "answer": [{
            "answer": "1.利用 Object.prototype.toString 判断",
            "explanation": "",
            "url": "./static/mock/primaryKnowledage/ArrayImg/write-isArray-1.jpg",
            "ImgExplanation": "这里有一个<span class='K_W'>小知识点</span>，Object.prototype.toString 会返回<span class='K_W'>\"[object type]\"</span>，其中type是对象的类型。<br>但Array、Function都重写了Object的toString方法，所以需要call函数改变指向，直接调用Object的toString方法，否则无法达到判断类型的效果<br>小技巧：<span class='K_W'>Object.prototype.toString.call(arg)</span>可简写为<span class='K_W'>toString.call(arg)</span>"
          }, {
            "answer": "2.利用 instanceof 判断",
            "explanation": "",
            "url": "./static/mock/primaryKnowledage/ArrayImg/write-isArray-instanceof.jpg",
            "ImgExplanation": ""
          },
          {
            "answer": "3.利用数组本身的 括号 判断",
            "explanation": "",
            "url": "./static/mock/primaryKnowledage/ArrayImg/write-isArray-string.jpg",
            "ImgExplanation": "由于这个方法实在是太笨了，实在是不推荐 ┑(￣Д ￣)┍ "
          }
        ]
      }
    }, {
      "id": 8,
      "titleList": "求首次出现最长字符串",
      "questions": {
        "question": "请对字符串str进行字符串查找，找出首次出现，最长无重复的字符串",
        "answer": [{
          "answer": "思路：新建数组存放str中出现的唯一值，并设置index索引。最终，遍历index索引找到最大值。",
          "explanation": "",
          "url": "./static/mock/primaryKnowledage/ArrayImg/lengthOfLongestSubString.jpg",
          "ImgExplanation": "<span class='K_W'>split</span>方法将str变为字符串<br><span class='K_W'>arr存放最长字符串</span><br><span class='K_W'>indexArr</span>存放每次最长字符串出现时的index<br><span class='K_W'>index</span>用于存放最长字符串的长度索引"
        }]
      }
    }
  ]
}
