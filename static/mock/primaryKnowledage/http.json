{
  "ret": true,
  "articleList": [{
    "id": 1,
    "titleList": "网络协议状态码",
    "questions": {
      "question": "请说出什么是状态码？常见的状态码有哪些？",
      "answer": [{
        "answer": "协议状态码，当我们访问url时提示的反馈，常见的状态吗如下：",
        "explanation": "点击链接：<a class='a_href' href='https://baike.baidu.com/item/HTTP%E7%8A%B6%E6%80%81%E7%A0%81/5053660?fr=aladdin' target='_blank' >百度百科状态码</a>",
        "url": "",
        "ImgExplanation": ""
      }, {
        "answer": "",
        "explanation": "<span class='K_W'>200(成功)</span>:表示成功无错误，可根据该状态码进行判断操作<br><span class='K_W'>301(服务器重定向)</span>:当访问旧地址url时，会自动解析到新地址下请求资源<br><span class='K_W'>404(未找到)</span>:表示当前所访问的资源不存在<br><span class='K_W'>500(服务器错误)</span>:表示服务器出现错误返回错误代码",
        "url": "",
        "ImgExplanation": ""
      }, {
        "answer": "一丶1 X X 响应代表\"消息\"",
        "explanation": "这一类型的状态码，代表请求已被接受，需要继续处理。这类响应是临时响应，只包含状态行和某些可选的响应头信息，并以空行结束。由于 HTTP/1.0 协议中没有定义任何 1xx 状态码，所以除非在某些试验条件下，服务器禁止向此类客户端发送 1xx 响应。",
        "url": "",
        "ImgExplanation": "<span class='K_W'>100 Continue</span>:响应已被接受，可发送剩余部分。<br><span class='K_W'>101 Switching Protocols</span>:服务器已经理解了客户端的请求，并将通过Upgrade 消息头通知客户端采用不同的协议来完成这个请求。在发送完这个响应最后的空行后，服务器将会切换到在Upgrade 消息头中定义的那些协议。只有在切换新的协议更有好处的时候才应该采取类似措施。 例如， 切换到新的HTTP 版本比旧版本更有优势， 或者切换到一个实时且同步的协议以传送利用此类特性的资源。<br><span class='K_W'>102 Processing</span>:由WebDAV（RFC 2518）扩展的状态码，代表处理将被继续执行。"
      }, {
        "answer": "二丶2 X X 响应代表\"成功\"",
        "explanation": "这一类型的状态码，代表请求已成功被服务器接收、理解、并接受。",
        "url": "",
        "ImgExplanation": "<span class='K_W'>200 OK</span>:请求成功，响应头或数据体将随此响应返回。<br><span class='K_W'>201 Created</span>:请求已经被实现，而且有一个新的资源已经依据请求的需要而建立，且其 URI 已经随Location 头信息返回。假如需要的资源无法及时建立的话，应当返回 '202 Accepted'。<br><span class='K_W'>202 Accepted</span>:服务器已接受请求，但尚未处理。正如它可能被拒绝一样，最终该请求可能会也可能不会被执行。在异步操作的场合下，没有比发送这个状态码更方便的做法了。<br>返回202状态码的响应的目的是允许服务器接受其他过程的请求（例如某个每天只执行一次的基于批处理的操作），而不必让客户端一直保持与服务器的连接直到批处理操作全部完成。在接受请求处理并返回202状态码的响应应当在返回的实体中包含一些指示处理当前状态的信息，以及指向处理状态监视器或状态预测的指针，以便用户能够估计操作是否已经完成。<br><span class='K_W'>203 Non-Authoritative Information</span>:服务器已成功处理了请求，但返回的实体头部元信息不是在原始服务器上有效的确定集合，而是来自本地或者第三方的拷贝。当前的信息可能是原始版本的子集或者超集。例如，包含资源的元数据可能导致原始服务器知道元信息的超集。使用此状态码不是必须的，而且只有在响应不使用此状态码便会返回200 OK的情况下才是合适的。<br><span class='K_W'>204 No Content</span>:服务器成功处理了请求，但不需要返回任何实体内容，并且希望返回更新了的元信息。响应可能通过实体头部的形式，返回新的或更新后的元信息。如果存在这些头部信息，则应当与所请求的变量相呼应。<br>如果客户端是浏览器的话，那么用户浏览器应保留发送了该请求的页面，而不产生任何文档视图上的变化，即使按照规范新的或更新后的元信息应当被应用到用户浏览器活动视图中的文档。<br>由于204响应被禁止包含任何消息体，因此它始终以消息头后的第一个空行结尾。<br><span class='K_W'>205 Reset Content</span>:服务器成功处理了请求，且没有返回任何内容。但是与204响应不同，返回此状态码的响应要求请求者重置文档视图。该响应主要是被用于接受用户输入后，立即重置表单，以便用户能够轻松地开始另一次输入。<br>与204响应一样，该响应也被禁止包含任何消息体，且以消息头后的第一个空行结束。<br><span class='K_W'>206 Partial Content</span>:服务器已经成功处理了部分 GET 请求。类似于 FlashGet 或者迅雷这类的 HTTP下载工具都是使用此类响应实现断点续传或者将一个大文档分解为多个下载段同时下载。<br>该请求必须包含 Range 头信息来指示客户端希望得到的内容范围，并且可能包含 If-Range 来作为请求条件。<br>响应必须包含如下的头部域：<br>Content-Range 用以指示本次响应中返回的内容的范围；如果是 Content-Type 为 multipart/byteranges 的多段下载，则每一 multipart 段中都应包含 Content-Range 域用以指示本段的内容范围。假如响应中包含 Content-Length，那么它的数值必须匹配它返回的内容范围的真实字节数。<br>Date<br>ETag 和/或 Content-Location，假如同样的请求本应该返回200响应。<br>Expires, Cache-Control，和/或 Vary，假如其值可能与之前相同变量的其他响应对应的值不同的话。<br>假如本响应请求使用了 If-Range 强缓存验证，那么本次响应不应该包含其他实体头；假如本响应的请求使用了 If-Range 弱缓存验证，那么本次响应禁止包含其他实体头；这避免了缓存的实体内容和更新了的实体头信息之间的不一致。否则，本响应就应当包含所有本应该返回200响应中应当返回的所有实体头部域。<br>假如 ETag 或 Last-Modified 头部不能精确匹配的话，则客户端缓存应禁止将206响应返回的内容与之前任何缓存过的内容组合在一起。<br><span class='K_W'>207 Multi-Status</span>:由WebDAV(RFC 2518)扩展的状态码，代表之后的消息体将是一个XML消息，并且可能依照之前子请求数量的不同，包含一系列独立的响应代码。<br>"
      }, {
        "answer": "三丶3 X X 响应代表\"重定向\"",
        "explanation": "这类状态码代表需要客户端采取进一步的操作才能完成请求。通常，这些状态码用来重定向，后续的请求地址（重定向目标）在本次响应的 Location 域中指明。<br>当且仅当后续的请求所使用的方法是 GET 或者 HEAD 时，用户浏览器才可以在没有用户介入的情况下自动提交所需要的后续请求。客户端应当自动监测无限循环重定向（例如：A->A，或者A->B->C->A），因为这会导致服务器和客户端大量不必要的资源消耗。按照 HTTP/1.0 版规范的建议，浏览器不应自动访问超过5次的重定向。",
        "url": "",
        "ImgExplanation": ""
      }, {
        "answer": "四丶4 X X",
        "explanation": "这类的状态码代表了客户端看起来可能发生了错误，妨碍了服务器的处理。除非响应的是一个 HEAD 请求，否则服务器就应该返回一个解释当前错误状况的实体，以及这是临时的还是永久性的状况。这些状态码适用于任何请求方法。浏览器应当向用户显示任何包含在此类错误响应中的实体内容。<br>如果错误发生时客户端正在传送数据，那么使用TCP的服务器实现应当仔细确保在关闭客户端与服务器之间的连接之前，客户端已经收到了包含错误信息的数据包。如果客户端在收到错误信息后继续向服务器发送数据，服务器的TCP栈将向客户端发送一个重置数据包，以清除该客户端所有还未识别的输入缓冲，以免这些数据被服务器上的应用程序读取并干扰后者。",
        "url": "",
        "ImgExplanation": ""
      }, {
        "answer": "五丶5 X X",
        "explanation": "（5、6字头）<br>这类状态码代表了服务器在处理请求的过程中有错误或者异常状态发生，也有可能是服务器意识到以当前的软硬件资源无法完成对请求的处理。除非这是一个HEAD 请求，否则服务器应当包含一个解释当前错误状态以及这个状况是临时的还是永久的解释信息实体。浏览器应当向用户展示任何在当前响应中被包含的实体。",
        "url": "",
        "ImgExplanation": ""
      }]
    }
  }, {
    "id": 2,
    "titleList": "http1.x、http2.x、https",
    "questions": {
      "question": "请描述http1.x,http2.x,https之间的区别",
      "answer": [{
        "answer": "更新ing···",
        "explanation": "",
        "url": "",
        "ImgExplanation": ""
      }]
    }
  }, {
    "id": 3,
    "titleList": "url解析",
    "questions": {
      "question": "请描述用户访问url时发生了那些事情？",
      "answer": [{
        "answer": "更新ing···",
        "explanation": "",
        "url": "",
        "ImgExplanation": ""
      }]
    }
  }, {
    "id": 4,
    "titleList": "httpRequest、Response",
    "questions": {
      "question": "http请求与http响应",
      "answer": [{
        "answer": "http请求:HTTP协议使用TCP协议进行传输，在应用层协议发起交互之前，首先是TCP的三次握手。完成了TCP三次握手后，客户端会向服务器发出一个请求报文。请求报文",
        "explanation": "请求部分会携带请求方式(option，get，post，head，put，delete，trace等)，请求地址(url)，请求协议(1.0、1.1还是2.0),请求类型(Accept:如果是“/”表示任意类型，如果是指定的类型，则会变成“type/)",
        "url": "",
        "ImgExplanation": ""
      }, {
        "answer": "http响应:当服务器收到get或post又或其他请求后，服务器会对报文进行响应，同样，响应报文也分为响应头与响应体",
        "explanation": "请求头的前两行为称为状态行，状态行返回了服务器的http版本，以及一个响应代码,即状态码。剩余部分为请求返回的数据，包括请求数据，cookie等",
        "url": "",
        "ImgExplanation": ""
      }]
    }
  }]
}
